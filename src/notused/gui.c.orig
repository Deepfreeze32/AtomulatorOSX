/*Atomulator v1.0 by Tom Walker
   Linux GUI*/

#include <allegro5/allegro.h>
#include <allegro5/allegro_native_dialog.h>
#include <allegro5/allegro_primitives.h>  // for drawing rectangles
#include <allegro5/allegro_image.h>
#include <allegro5/allegro_font.h>
#include <allegro5/allegro_audio.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include "atom.h"
#include "roms.h"
#include "resources.h"
#include "sidtypes.h"
#include "sid_atom.h"

#undef printf

// enum of MENU items
enum
{
	MENU_filemenu = 0, MENU_gui_reset, MENU_gui_exit,

	MENU_tapemenu, MENU_gui_loadt, MENU_gui_ejectt, MENU_gui_rewind, 
	MENU_tapespdmenu, MENU_gui_normal, MENU_gui_fast,

	MENU_diskmenu, MENU_gui_load0, MENU_gui_load1, MENU_gui_eject0, 
	MENU_gui_eject1, MENU_gui_wprot0, MENU_gui_wprot1, MENU_gui_wprotd,

	MENU_settingsmenu, MENU_videomenu, MENU_gui_fullscreen, MENU_gui_snow,
	MENU_hardmenu,

	MENU_gui_colour, MENU_gui_mono, MENU_gui_colour50, MENU_gui_colour60,

	MENU_gui_bbc, MENU_ramrommenu, MENU_gui_ramrom_en, MENU_gui_ramromdsk_en,
	
	MENU_soundmenu, MENU_gui_internalsnd, MENU_gui_tnoise,

	MENU_gui_atomsid,

	MENU_gui_ddnoise, MENU_ddtypemenu, MENU_gui_ddtype1, MENU_gui_ddtype2,
	MENU_ddvolmenu, MENU_gui_ddvol1, MENU_gui_ddvol2, MENU_gui_ddvol3,
	MENU_keymenu, MENU_gui_keydefine, MENU_gui_keydefault, MENU_gui_joystk_en,

	MENU_miscmenu, MENU_speedmenu, MENU_gui_speed1, MENU_gui_speed2,
	MENU_gui_speed3, MENU_gui_speed4, MENU_gui_speed5, MENU_gui_speed6,
	MENU_gui_speed7, MENU_gui_speed8, MENU_gui_speed9, MENU_gui_speed10,
	MENU_gui_scrshot,

	MENU_gui_showspeed
};


int timerspeeds[] 	= { 5, 12, 25, 38, 50, 75, 85, 100, 150, 200, 250 };
int emuspeed = 4;

char ejecttext[2][260] = { "Eject disc :0/2", "Eject disc :1/3" };

void setejecttext(int drive, char *fn)
{
	if (fn[0])
		sprintf(ejecttext[drive], "Eject drive :%i/%i - %s", drive, drive + 2, al_get_app_name()); //HACK ??
	else
		sprintf(ejecttext[drive], "Eject drive :%i/%i", drive, drive + 2);
}

void setquit()
{
}

extern int fullscreen;
extern int quited;
int windx = 512, windy = 384;
extern int dcol;
extern int ddtype, ddvol, sndddnoise;
extern int showspeed;
extern int colourboardchoice;

ALLEGRO_KEYBOARD_STATE keybd;
ALLEGRO_TIMER *timer;
ALLEGRO_TIMER *displaytimer;
ALLEGRO_TIMER *hudtimer;
ALLEGRO_EVENT_QUEUE *events;
ALLEGRO_EVENT event;
ALLEGRO_DISPLAY *display;
ALLEGRO_MENU *menu;
ALLEGRO_FONT *font;
ALLEGRO_AUDIO_STREAM *stream;
ALLEGRO_AUDIO_STREAM *ddstream;

extern void scrupdate();

void gui_keydefine();

void updatelinuxgui()
{
    al_set_menu_item_flags(menu, MENU_gui_normal, (!fasttape) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_fast, (fasttape) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_wprot0, (writeprot[0]) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_wprot1, (writeprot[1]) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_wprotd, (defaultwriteprot) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_fullscreen, (fullscreen) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_snow, (snow) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_mono, (colourboardchoice == 0) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_colour50, (colourboardchoice == 1) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_colour60, (colourboardchoice == 2) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    //FIXME al_set_menu_item_flags(menu, MENU_gui_bbc, (bbcmode) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_ramrom_en, (ramrom_enable) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_ramromdsk_en, (RR_jumpers & RAMROM_FLAG_DISKROM) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_internalsnd, (spon) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_tnoise, (tpon) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_atomsid, (sndatomsid)  ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_ddnoise, (sndddnoise) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_ddtype1, (!ddtype) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_ddtype2, (ddtype) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_ddvol1, (ddvol == 1) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_ddvol2, (ddvol == 2) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_ddvol3, (ddvol == 3) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_joystk_en, (joyst) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_speed1, (emuspeed == 0) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed2, (emuspeed == 1) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed3, (emuspeed == 2) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed4, (emuspeed == 3) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed5, (emuspeed == 4) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed6, (emuspeed == 5) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed7, (emuspeed == 6) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed8, (emuspeed == 7) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed9, (emuspeed == 8) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
    al_set_menu_item_flags(menu, MENU_gui_speed10, (emuspeed == 9) ? ALLEGRO_MENU_ITEM_CHECKED : 0);

    al_set_menu_item_flags(menu, MENU_gui_showspeed, (showspeed) ? ALLEGRO_MENU_ITEM_CHECKED : 0);
}

// Cannot hash define this function because needs to be a member of the array of functions
void gui_dummy()
{}

// File menu functions
void gui_reset()
{
    atom_reset(0);
}

void gui_exit()
{
    quited = 1;
}

// Tape menu functions

char tapefn[260];

void gui_loadt()
{
    char tempname[260];
    ALLEGRO_FILECHOOSER *fc;

    memcpy(tempname, tapefn, 260);

    fc = al_create_native_file_dialog(exedir, "Please choose a tape image", "UEF;CSW", ALLEGRO_FILECHOOSER_FILE_MUST_EXIST);
    if (al_show_native_file_dialog(display, fc))
    {
        closeuef();
        closecsw();
        if (al_get_native_file_dialog_count(fc) == 1)
        {
            memcpy(tapefn, al_get_native_file_dialog_path(fc, 0), 260);
            loadtape(tapefn);
            // tapeloaded=1;
        }
    }

    al_destroy_native_file_dialog(fc);
}

void gui_ejectt()
{
    closeuef();
    closecsw();
    //        tapeloaded=0;
}

void gui_rewind()
{
    closeuef();
    closecsw();
    loadtape(tapefn);
}

void gui_normal()
{
    fasttape = 0;
    updatelinuxgui();
}

void gui_fast()
{
    fasttape = 1;
    updatelinuxgui();
}

// Disc menu functions

void gui_load0()
{
    char tempname[260];

    ALLEGRO_FILECHOOSER *fc;

    memcpy(tempname, discfns[0], 260);

    fc = al_create_native_file_dialog(exedir, "Please choose a disc image", "DSK;SSD;DSD;IMG;FDI", ALLEGRO_FILECHOOSER_FILE_MUST_EXIST);
    if (al_show_native_file_dialog(display, fc))
    {
        closedisc(0);

        if (al_get_native_file_dialog_count(fc) == 1)
        {
            memcpy(discfns[0], al_get_native_file_dialog_path(fc,0), 260);
            loaddisc(0, discfns[0]);
            if (defaultwriteprot)
                writeprot[0] = 1;
        }
    }
    updatelinuxgui();
    al_destroy_native_file_dialog(fc);
}

void gui_load1()
{
    char tempname[260];

    ALLEGRO_FILECHOOSER *fc;

    memcpy(tempname, discfns[1], 260);

    fc = al_create_native_file_dialog(exedir, "Please choose a disc image", "DSK;SSD;DSD;IMG;FDI", ALLEGRO_FILECHOOSER_FILE_MUST_EXIST);

    if (al_show_native_file_dialog(display, fc))
    {
        closedisc(1);

        if (al_get_native_file_dialog_count(fc) == 1)
        {
            memcpy(discfns[1], al_get_native_file_dialog_path(fc,0), 260);
            loaddisc(1, discfns[1]);
            if (defaultwriteprot)
                writeprot[1] = 1;
        }
    }
    updatelinuxgui();
    al_destroy_native_file_dialog(fc);
}

void gui_eject0()
{
    closedisc(0);
    discfns[0][0] = 0;
}

void gui_eject1()
{
    closedisc(1);
    discfns[1][0] = 0;
}

void gui_wprot0()
{
    writeprot[0] = !writeprot[0];
    if (fwriteprot[0])
        fwriteprot[0] = 1;
    updatelinuxgui();
}

void gui_wprot1()
{
    writeprot[1] = !writeprot[1];
    if (fwriteprot[1])
        fwriteprot[1] = 1;
    updatelinuxgui();
}

void gui_wprotd()
{
    defaultwriteprot = !defaultwriteprot;
    updatelinuxgui();
}

// Settings menu functions

void gui_fullscreen()
{
	int flags = al_get_display_flags(display);

	bool value = (flags & ALLEGRO_FULLSCREEN_WINDOW) ? true : false;
	al_set_display_flag(display, ALLEGRO_FULLSCREEN_WINDOW, !value);
}

void gui_snow()
{
    snow = !snow;
    updatelinuxgui();
}

void gui_mono()
{
    colourboard = 0;
    colourboardchoice = 0;
    updatelinuxgui();
    updatepal();
}

void gui_colour50()
{
    colourboard = 1;
    colourboardchoice = 1;
    updatelinuxgui();
    updatepal();
}

void gui_colour60()
{
    colourboard = 1;
    colourboardchoice = 2;
    updatelinuxgui();
    updatepal();
}

void gui_bbc()
{
	//FIXME
 //   bbcmode = !bbcmode;
    atom_reset(0);
}

void gui_ramrom_en()
{
    ramrom_enable = !ramrom_enable;
    atom_reset(0);
}

void gui_ramromdsk_en()
{
    RR_jumpers ^= RAMROM_FLAG_DISKROM;
    atom_reset(0);
}

// Sound menu functions
void gui_internalsnd()
{
    spon = !spon;
    updatelinuxgui();
}

void gui_tnoise()
{
    tpon = !tpon;
    updatelinuxgui();
}


void gui_atomsid()
{
    sndatomsid=!sndatomsid;
    updatelinuxgui();
}

void gui_ddnoise()
{
    sndddnoise = !sndddnoise;
    updatelinuxgui();
}

void gui_ddtype1()
{
    ddtype = 0;
    closeddnoise();
    loaddiscsamps();
    updatelinuxgui();
}

void gui_ddtype2()
{
    ddtype = 1;
    closeddnoise();
    loaddiscsamps();
    updatelinuxgui();
}

void gui_ddvol1()
{
    ddvol = 1;
    updatelinuxgui();
}

void gui_ddvol2()
{
    ddvol = 2;
    updatelinuxgui();
}
void gui_ddvol3()
{
    ddvol = 3;
    updatelinuxgui();
}

// MH gui_keydefine in another source file

void gui_keydefault()
{
    int c;

    for (c = 0; c < 128; c++)
        keylookup[c] = c;
}

void gui_joystk_en()
{
    joyst = !joyst;
    updatelinuxgui();
}

// Misc menu functions

// MH - moved from atom.c and changed to Allegro5
// cannot get al_set_timer_speed to work reliably

void changetimerspeed(int i)
{
    al_destroy_timer(timer);
    timer = al_create_timer(1.0/(i*6));
    if (timer == NULL)
    {
        rpclog("Error creating Allegro timer\n");
        return ;
    }

    al_register_event_source(events, al_get_timer_event_source(timer));
    al_start_timer(timer);
    updatelinuxgui();
}

void gui_speed1()
{
    emuspeed = 0;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed2()
{
    emuspeed = 1;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed3()
{
    emuspeed = 2;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed4()
{
    emuspeed = 3;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed5()
{
    emuspeed = 4;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed6()
{
    emuspeed = 5;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed7()
{
    emuspeed = 6;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed8()
{
    emuspeed = 7;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed9()
{
    emuspeed = 8;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_speed10()
{
    emuspeed = 9;
    changetimerspeed(timerspeeds[emuspeed]);
}

void gui_showspeed()
{
    showspeed = !showspeed;
    updatelinuxgui();
}

void gui_scrshot()
{
    ALLEGRO_FILECHOOSER *fc;

    fc = al_create_native_file_dialog(exedir, "Please enter a filename", "BMP", ALLEGRO_FILECHOOSER_SAVE);

    if (al_show_native_file_dialog(display, fc))
    {
        if (al_get_native_file_dialog_count(fc) == 1)
        {
            memcpy(scrshotname, al_get_native_file_dialog_path(fc, 0), 260);
            savescrshot = 1;

            char* ext = strrchr(scrshotname, '.');
            if (!ext)
                strcat(scrshotname, ".bmp");
        }
        printf("screen shot %s\n", scrshotname);
    }
}

// Array of menu pointers
typedef void (*func)(void);

func MENU_fn[] =
{
    gui_dummy, gui_reset, gui_exit,

    gui_dummy, gui_loadt, gui_ejectt, gui_rewind,
    gui_dummy, gui_normal, gui_fast, 

    gui_dummy, gui_load0, gui_load1, gui_eject0,
    gui_eject1, gui_wprot0, gui_wprot1, gui_wprotd,

    gui_dummy, gui_dummy, gui_fullscreen, gui_snow,
    gui_dummy,

    gui_dummy, gui_mono, gui_colour50, gui_colour60,

    gui_bbc, gui_dummy, gui_ramrom_en, gui_ramromdsk_en,

    gui_dummy, gui_internalsnd, gui_tnoise, gui_atomsid,

    gui_ddnoise, gui_dummy, gui_ddtype1, gui_ddtype2,
    gui_dummy, gui_ddvol1, gui_ddvol2, gui_ddvol3,
    gui_dummy, gui_keydefine, gui_keydefault, gui_joystk_en,
    gui_dummy, gui_dummy, gui_speed1, gui_speed2,
    gui_speed3, gui_speed4, gui_speed5, gui_speed6,
    gui_speed7, gui_speed8, gui_speed9, gui_speed10,
    gui_scrshot, gui_showspeed
};

ALLEGRO_MENU_INFO menu_info[] = {
    ALLEGRO_START_OF_MENU("&File", MENU_filemenu),
    { "&Hard reset",    MENU_gui_reset, 0, NULL },
    { "&Exit",          MENU_gui_exit,  0, NULL },
    ALLEGRO_END_OF_MENU,

    ALLEGRO_START_OF_MENU("&Tape", MENU_tapemenu),
        { "Load tape...",   MENU_gui_loadt,     0, NULL },
        { "Eject tape",     MENU_gui_ejectt,    0, NULL },
        { "Rewind tape",    MENU_gui_rewind,    0, NULL },
        ALLEGRO_START_OF_MENU("Tape speed", MENU_tapespdmenu),
            { "Normal", MENU_gui_normal,    ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "Fast",   MENU_gui_fast,      ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
        ALLEGRO_END_OF_MENU,
    ALLEGRO_END_OF_MENU,

    ALLEGRO_START_OF_MENU("&Disk", MENU_diskmenu),
        { "Load disc :&0/2...",         MENU_gui_load0,  0,                             NULL },
        { "Load disc :&1/3...",         MENU_gui_load1,  0,                             NULL },
        { "Eject disc :0/2",            MENU_gui_eject0, 0,                             NULL },
        { "Eject disc :1/3",            MENU_gui_eject1, 0,                             NULL },
        { "Write protect disc :0/2",    MENU_gui_wprot0, ALLEGRO_MENU_ITEM_CHECKBOX,    NULL },
        { "Write protect disc :1/3",    MENU_gui_wprot1, ALLEGRO_MENU_ITEM_CHECKBOX,    NULL },
        { "Default write protect",      MENU_gui_wprotd, ALLEGRO_MENU_ITEM_CHECKBOX,    NULL },
    ALLEGRO_END_OF_MENU,


    ALLEGRO_START_OF_MENU("&Settings", MENU_settingsmenu),
        ALLEGRO_START_OF_MENU("&Video", MENU_videomenu),
            { "Fullscreen", MENU_gui_fullscreen,    ALLEGRO_MENU_ITEM_CHECKBOX, NULL},
            { "Snow",       MENU_gui_snow,          ALLEGRO_MENU_ITEM_CHECKBOX, NULL},
        ALLEGRO_END_OF_MENU,
        ALLEGRO_START_OF_MENU("&Hardware", MENU_hardmenu),
            ALLEGRO_START_OF_MENU("Colour board", MENU_gui_colour),
                { "Mono",               MENU_gui_mono,      ALLEGRO_MENU_ITEM_CHECKBOX, NULL},
                { "Colour board 50Hz",	MENU_gui_colour50,	ALLEGRO_MENU_ITEM_CHECKBOX,	NULL},
                { "Colour board 60Hz",	MENU_gui_colour60,	ALLEGRO_MENU_ITEM_CHECKBOX,	NULL},
            ALLEGRO_END_OF_MENU,
            { "&BBC BASIC",	   MENU_gui_bbc,    ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
        ALLEGRO_END_OF_MENU,
        ALLEGRO_START_OF_MENU("&RamRom", MENU_ramrommenu),
            { "RAM/ROM enabled",			MENU_gui_ramrom_en,		ALLEGRO_MENU_ITEM_CHECKBOX,	NULL},
            { "RAM/ROM disk rom enabled",	MENU_gui_ramromdsk_en,	ALLEGRO_MENU_ITEM_CHECKBOX,	NULL},
        ALLEGRO_END_OF_MENU,

        ALLEGRO_START_OF_MENU("&Sound", MENU_soundmenu),
            { "Internal speaker",  	MENU_gui_internalsnd, 	ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "Tape noise",         MENU_gui_tnoise,		ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "AtomSID",            MENU_gui_atomsid,       ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            {"Disc drive noise",    MENU_gui_ddnoise, ALLEGRO_MENU_ITEM_CHECKBOX, NULL},
            ALLEGRO_START_OF_MENU("Disc drive type", MENU_ddtypemenu),
                { "5.25", MENU_gui_ddtype1, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
                { "3.5",  MENU_gui_ddtype2, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            ALLEGRO_END_OF_MENU,
            ALLEGRO_START_OF_MENU("Disc drive volume", MENU_ddvolmenu),
                { "33%",  MENU_gui_ddvol1, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
                { "66%",  MENU_gui_ddvol2, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
                { "100%", MENU_gui_ddvol3, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            ALLEGRO_END_OF_MENU,
        ALLEGRO_END_OF_MENU,
        ALLEGRO_START_OF_MENU("&Keyboard", MENU_keymenu),
            { "Redefine keyboard", MENU_gui_keydefine, 0, NULL },
            { "Default mapping",   MENU_gui_keydefault, 0, NULL },
        ALLEGRO_END_OF_MENU,
        { "Joystick PORTB", MENU_gui_joystk_en, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
    ALLEGRO_END_OF_MENU,

    ALLEGRO_START_OF_MENU("&Misc", MENU_miscmenu),
        ALLEGRO_START_OF_MENU("Speed", MENU_speedmenu),
            { "10%",  MENU_gui_speed1, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "25%",  MENU_gui_speed2, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "50%",  MENU_gui_speed3, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "75%",  MENU_gui_speed4, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "100%", MENU_gui_speed5, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "150%", MENU_gui_speed6, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "200%", MENU_gui_speed7, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "300%", MENU_gui_speed8, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "400%", MENU_gui_speed9, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
            { "500%", MENU_gui_speed10, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
        ALLEGRO_END_OF_MENU,
        { "Show emulator speed", MENU_gui_showspeed, ALLEGRO_MENU_ITEM_CHECKBOX, NULL },
        { "Save screenshot", MENU_gui_scrshot, 0, NULL },
    ALLEGRO_END_OF_MENU,
    ALLEGRO_END_OF_MENU
};


bool allegro_init()
{
    // initialize allegro and required addons -
    if (!(al_init() && al_init_image_addon() && al_init_primitives_addon() && 
		al_install_mouse() && al_install_keyboard() && al_install_joystick() && 
		al_init_font_addon() && al_init_acodec_addon() && al_install_audio() && al_init_native_dialog_addon()))
    {
        rpclog("Can't initialize Allegro - quiting!\n");
        return false;
    }

	// Paths in Allegro 5
	// The executable is in /home/malcolm/Atomulator-1
	// The following was under Debian	
	// 	RESOURCES_PATH: /home/malcolm/Atomulator-1/
	// 		- need to use this so that under OSX resources are in the app bundle
	// 	TEMP_PATH: /tmp/
	// 	USER_DATA_PATH: /home/malcolm/.local/share/liballeg.org/Atomulator/
	// 	USER_SETTINGS_PATH: /home/malcolm/.config/liballeg.org/Atomulator/
	//		- the standard place for config files (!)
	// 	USER_HOME_PATH: /home/malcolm/
	// 	USER_DOCUMENTS_PATH: /home/malcolm/Documents/
	// 	EXENAME_PATH: /home/malcolm/Atomulator-1/Atomulator
	//	
	//	So 	.. to keep this simple
	//		.. store resources (fonts, roms, disk sounds etc) in resources path
	//		.. mmc files .. store this on RESOURCES_PATH but on OSX store in USER_DOCUMENTS_PATH/Atomulator
	//			as we dont want to store the mmc files in the resource bundle. 
	//		.. store log file and config files as per mmc files
	
   	ALLEGRO_PATH *path;
   	char fontpath[MAXPATH-1];

   	al_set_org_name("");
   	al_set_app_name("Atomulator");  // Explicitly set to remove .exe on Windows

	// Set the resources path
	// for OSX create the directories if they dont exist
#ifdef __APPLE__
   	path = al_get_standard_path(ALLEGRO_USER_DOCUMENTS_PATH);
	if (path)
	{
		al_append_path_component(path, "Atomulator");
		al_append_path_component(path, "mmc");
   		al_make_directory(al_path_cstr(path, ALLEGRO_NATIVE_PATH_SEP)); 
   		al_remove_path_component(path, -1); //remove "mmc" from structure
   		strcpy(exedir, al_path_cstr(path, ALLEGRO_NATIVE_PATH_SEP));
   		al_destroy_path(path);
	}
#else
   	path = al_get_standard_path(ALLEGRO_RESOURCES_PATH);
	if (path)
	{
   		strcpy(exedir, al_path_cstr(path, ALLEGRO_NATIVE_PATH_SEP));
   		al_destroy_path(path);
	}
#endif

	// Get the font file
   	path = al_get_standard_path(ALLEGRO_RESOURCES_PATH);
	if (path)
	{
		al_append_path_component(path, "fonts");
   		al_set_path_filename(path, "fixed_font.tga");
   		strcpy(fontpath, al_path_cstr(path, ALLEGRO_NATIVE_PATH_SEP));
   		al_destroy_path(path);
	}

    font = al_load_font(fontpath, 0, 0);
    if (!font)
    {
        rpclog("Failed to load font from: %s.\n", fontpath);
        return false;
    }

    return true;
}

bool allegro_create_display_and_menus()
{
#ifdef ALLEGRO_GTK_TOPLEVEL
   	/* ALLEGRO_GTK_TOPLEVEL is necessary for menus with GTK - ie Linux */
   	al_set_new_display_flags(ALLEGRO_WINDOWED | ALLEGRO_RESIZABLE | ALLEGRO_GTK_TOPLEVEL);
#else
   	al_set_new_display_flags(ALLEGRO_WINDOWED | ALLEGRO_RESIZABLE);
#endif

	al_set_new_display_option(ALLEGRO_COLOR_SIZE, 32, ALLEGRO_REQUIRE);

    display = al_create_display(winsizex, winsizey);
    if (display == NULL) 
	{
        rpclog("Error creating Allegro display (32bit pixel size required).\n");
        return false;
    }

    menu = al_build_menu(menu_info);
    if (menu == NULL)
    {
        rpclog("Error creating Allegro menu\n");
        return false;
    }

    if (!al_set_display_menu(display, menu))
    {
        rpclog("Error associating Allegro menu with Allegro display\n");
        return false;
    }

    updatelinuxgui();

	char title[500];
	// Build data is from the makefile
	sprintf(title, "Atomulator %.2f %u build %u", ATOMULATOR_VERSION, BUILD_DATE, BUILD_NUMBER);

	al_set_window_title(display, title);
    return true;
}

bool allegro_create_timer_and_events()
{
    timer = al_create_timer(1.0/300);
    if (timer == NULL)
    {
        rpclog("Error creating Allegro timer\n");
        return false;
    }

    displaytimer = al_create_timer(1.0/60);
    if (displaytimer == NULL)
    {
        rpclog("Error creating Allegro display timer\n");
        return false;
    }

    hudtimer = al_create_timer(1.0);
    if (hudtimer == NULL)
    {
        rpclog("Error creating Allegro head-up-display timer\n");
        return false;
    }

    events = al_create_event_queue();
    if (events == NULL)
    {
        rpclog("Error creating Allegro event queue\n");
        return false;
    }

    al_register_event_source(events, al_get_keyboard_event_source());
    al_register_event_source(events, al_get_timer_event_source(timer));
    al_register_event_source(events, al_get_timer_event_source(displaytimer));
    al_register_event_source(events, al_get_timer_event_source(hudtimer));
    al_register_event_source(events, al_get_display_event_source(display));
    al_register_event_source(events, al_get_default_menu_event_source());
    al_start_timer(timer);
    al_start_timer(displaytimer);
    al_start_timer(hudtimer);
    return true;
}

extern void giveSoundBuffer();

void allegro_process_events()
{
    al_wait_for_event(events, &event);
    switch (event.type)
    {
        case ALLEGRO_EVENT_TIMER:
            if(event.timer.source == timer)
                scrupdate();
            if(event.timer.source == displaytimer)
                drawAtomScreen();
            if(event.timer.source == hudtimer)
                hudupdate();
            break;

        case ALLEGRO_EVENT_KEY_DOWN:
            if (event.keyboard.keycode == ALLEGRO_KEY_F12)
                atom_reset(0);
            break;

        case ALLEGRO_EVENT_DISPLAY_CLOSE:
            quited = true;
            break;

        case ALLEGRO_EVENT_DISPLAY_RESIZE:
            winsizex = al_get_display_width(event.display.source);
            winsizey = al_get_display_height(event.display.source);
            al_acknowledge_resize(event.display.source);
            break;

        case ALLEGRO_EVENT_MENU_CLICK:
            (*MENU_fn[event.user.data1])();
            break;
    }
}
